# use conda enviroment "general" to run this script

import dnaio



potential_combination_of_inserts = '../6_potential combination after Gibson assembly/potential_combination_of_inserts.fasta'

reference = 'reference.fasta'

with dnaio.open(potential_combination_of_inserts) as input_fastq, dnaio.open(reference, mode='w') as output_fastq:
    
    for read in input_fastq:
        
        sequence = read.sequence
        
        upstream_sequence = 'ggccgcttcttggtgccagcttatcagccaccatggtgagcaagggcgaggagctgttcaccggggtggtgcccatcctggtcgagctggacggcgacgtaaacggccacaagttcagcgtccgcggcgagggcgagggcgatgccaccaacggcaagctgaccctgaagttcatctgcaccaccggcaagctgcccgtgccctggcccaccctcgtgaccaccttaggctacggcgtggcctgcttcgcccgctaccccgaccacatgaagcagcacgacttcttcaagtccgccatgcccgaaggctacgtccaggagcgcaccatctctttcaaggacgacggtacctacaagacccgcgccgaggtgaagttcgagggcgacaccctggtgaaccgcatcgtgctgaagggcatcgacttcaaggaggacggcaacatcctggggcacaagctggagtacaacttcaacagccacaaggtctatatcacggccgacaagcagaagaacggcatcaaggctaacttcaagacccgccacaacgttgaggacggcggcgtgcagctcgccgaccactaccagcagaacacccccatcggcgacggccccgtgctgctgcccgacaaccactacctgagccatcagtccaaactgagcaaagaccccaacgagaagcgcgatcacatggtcctgaaggagagggtgaccgccgccgggattacacatgacatggatgaactatataaataaGCCCNNNNNNNNNNNNNNNGGGCCTACTACCACCACCACCACCACCCCTTCTGGGGTCACTCCATCCATGCTCTCTCCAGCCAGCCATCTCAAGGAGAAACATAGTTCAACTGAAAGACTCATGCTCTGATTGTGGTGGGGTGGGGATCCTTGGGAAGAATTACTCCCAAGAGTAACTCTCATTATCTCCTCCACAGAAAACACACAGCTTCCACAACTTCTCTGTTTTCTGTCAGTCCCCCAGTGGCCGCCCTTACACGTCTCCTACTTCAATGGTAGGGGCGGTTTATTTATTTATTTTTTGAAGGCCACTGGGAGGAGCCTGACCTAACCTTTTAGGGTGGTTAGGACATCTCCCCCACCTCCCCACTTTTTTCCCCAAGACAAGACAATCGAGGTCTGGCTTGAGAACGACCTTTCTTTCTTTATTTCTCAGCCTGCCCTTGGGGAGATGAGGGAGCCCTGTCTGCGTTTTTGGATGTGAGTAGAAGAGTTAGTTTGTTTTGTTTTATTATTCCTGGCCATACTCAGGGGTCCAGGAAGAATTTGTACCATTTAATGGGTTGGGAGTCTTGGCCAAGGAAGAATCACACCCTTGGAATAGAAATTTCCACCTCCCCAACCTTTCTCTCAGACAGCTTATCCTTTTCAACCAACTTTTTGGCCAGGGAGGAATGTCCCTTTTGTTCTTCCCCCTGAGAAGCCATTCCTTTGTCTGCCAACCTCCCTGGGGTCCTGCCTGTTTCCTCCCAATGGAGGGTTTTTTTGGGGGGTGGTCCCCGTCTGGGGGGCCCCTCCAGCCAGTACTCCAGGTCTCCCTGTCTCTCCCCCGCTGCCATTTTGATAGTATAATCTATTTTTAAATGGGGCTTTTCAATAGGGGAGAGGGAGTCATCTCTTCCTATATTTGGTGGGGTGGGTGGGAAGGAAGGGATTTGGGGGGGAATCTTCCTGCCGCCTCCCCCACTCCAAGTGTTTATTTTTGATACCAAACATGAATTTTCAGTTCCCTCCCTCCCAGCCCCCCAATTTCCTGCGGGCGGGTACAAAGGACCCTTTCAATGTCCCTGGAGTTGGGAGGGAGGAATGGGGGACATAAAGCCTGTCCTGTCTCTATTCTAGGCAAGAGAGAGTGGGTT'
        downstream_sequence = 'GTCACTGTTTGATGGCGAGCAAGACAGACTGGGTGACCAAAACCACATGTGAGAGACTACGTGGGCATGAAACTACAGTAGAGGTTGTCAGGGATTGTGGCAAAGATTGTGTAGGTGACAAACCTCACTGTAGGCGACTCAACGTTTGAGAAATAGATGATGTGCAAAACTGTTTACTTGAGGCTGTAGTGTCAGCTAAAGCTGTAAGACTGTATGGGTGCGAACTTGATTGTACGGGAGAGAATGGCTGGGAGACCAAACCAGTGACCGAGACCAAAGATACAAGAAGGTGCAATTGTGTGTACGAAAGCAGGCGTGAGAGACTGCAGCAAAGACTGAGAAAAACGAATGGCTGTGACTGGGAGAGTGTGACAGGCTGTGTGTGTGTGTGTGTACACCTGAAACTAGTTGCAAATCGATTTACCATTAaactggatccgcaggcctctgctagcttgactgactgagatacagcgtaccttcagctcacgc'
        
        whole_reference_sequence = upstream_sequence + sequence + downstream_sequence
        
        read.sequence = whole_reference_sequence # replace the original sequence
        
        output_fastq.write(read) # write the read to the output FASTQ file